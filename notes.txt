6
11
1 2
1 4
1 5
2 3
2 4
2 5
3 4
3 5
3 6
4 6
5 6


grafo NÃO DIRECIONADO SIMPLES

ENUMERAR TODOS OS CICLOS
implementar com 
(i) permutação dos vértices; 
(ii) caminhamento no grafo



private static int cont=0;

	//armazena a permutacao corrente
	private static char[] p;


	/**
	 * metodo principal: recebe o vetor cujos elementos que serao permutados
	 * @param vet
	 */
	public static void permuta(char [] vet) {

		p = new char[3];
		permuta(vet,0);
	}


	/**
	 * método recursivo que implementa as permutacoes
	 * @param vet
	 * @param n
	 */
	private static void permuta(char []vet, int n) {

		if (n==p.length) {
			cont++;
			imprime();

		} else {

			for (int i=0; i < vet.length; i++) {

				boolean achou = false;
				for (int j = 0; j < n; j++) {

					if (p[j]==vet[i]) achou = true;
				}

				if (!achou) {

					p[n] = vet[i];
					permuta(vet,n+1);
				}

			} //--for

		} //--if/else

	} //--permuta


	/** imprime a permutacao corrente */
	private static void imprime() {

		System.out.println();
		System.out.print("(" + cont + ") : ");
		for (int i=0; i < p.length; i++) System.out.print(p[i] + " ");

	} //--imprime


	/** metodo principal para teste da classe */
	public static void main(String[] args) {

		char v[] = {'1','2','3', '4', '5', '6'};
		Permutacoes.permuta(v);
	}